<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>WAIT | HOPE</title>
        <link>https://penn513.github.io/</link>
        <description>WAIT | HOPE</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 12 Jan 2022 15:58:26 &#43;0800</lastBuildDate>
            <atom:link href="https://penn513.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>MonoFlex阅读笔记</title>
    <link>https://penn513.github.io/monoflex%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Wed, 12 Jan 2022 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/monoflex%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[Abstract作者提出一个3D目标检测模型，将截断的目标解耦出来，并将多种深度估计方法结合使用。特别地，作者将特征图的边缘解耦，专门用于长]]></description>
</item><item>
    <title>Swin-Transformer笔记</title>
    <link>https://penn513.github.io/swin-transformer%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Wed, 12 Jan 2022 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/swin-transformer%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[前期工作why 优美 统一建模 知识共享 VIT 示意图 问题 未考虑视觉信号特点，平移不变性，只适合分类，不适合更精细的问题 global attention，计算量跟分]]></description>
</item><item>
    <title>数据结构与算法 - 并查集</title>
    <link>https://penn513.github.io/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
    <pubDate>Thu, 15 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
    <description><![CDATA[概念 并查集： Disjoint-Set，是用于处理一些不交集的合并及查询问题的一种数据结构，支持查询、合并以及添加操作。 合并： Union，简单]]></description>
</item><item>
    <title>Linux - perf性能分析</title>
    <link>https://penn513.github.io/perf%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
    <pubDate>Wed, 14 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/perf%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[perf也被称为perf_events，是一个面向event的观察工具，可用于性能剖析或内核故障排查。perf是内核的一部分，随内核发布。 事]]></description>
</item><item>
    <title>Git使用</title>
    <link>https://penn513.github.io/git%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Mon, 12 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/git%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[1. 子仓同步主仓 新增主仓代码库 git remote add upstream 'xxx.git' 拉取主仓代码至本地master分支 git pull upstream master 提交本地代码至远程子仓 git push 2. 强制push，覆盖远程仓库 回退本]]></description>
</item><item>
    <title>数据结构与算法 - BFS</title>
    <link>https://penn513.github.io/bfs/</link>
    <pubDate>Mon, 12 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/bfs/</guid>
    <description><![CDATA[框架1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def BFS(start, target): queue = collections.deque() visited = set() queue.append(start) visited.add(start) step = 0 while queue: size = len(queue) for i in range(size): cur = queue.popleft() if cur == target: return step for node in cur: if not node in visited(): queue.append(node) visited.add(node) step += 1 return step 例]]></description>
</item><item>
    <title>数据结构与算法 - LRU &amp; LFU</title>
    <link>https://penn513.github.io/lrulfu/</link>
    <pubDate>Mon, 12 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/lrulfu/</guid>
    <description><![CDATA[LRU1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class LRUCache: def __init__(self, capacity): self.capacity = capacity self.queue = collections.OrderedDict() def get(self, key): if key not in self.queue: return -1 value = self.queue.pop(key) self.queue[key] = value # 将命中的数据重新添加至头部 return self.queue[key] def put(self, key): if key]]></description>
</item><item>
    <title>数据结构与算法 - 二分查找</title>
    <link>https://penn513.github.io/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
    <pubDate>Mon, 12 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
    <description><![CDATA[模板 1 - 二分查找1 2 3 4 5 6 7 8 9 10 11 12 13 14 def binary_search(nums, target): if len(nums) &lt;= 0: return -1 left, right = 0, len(nums) - 1 # 查找区间[left, right] while left &lt;= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid elif]]></description>
</item><item>
    <title>数据结构与算法 - 优先队列</title>
    <link>https://penn513.github.io/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</link>
    <pubDate>Mon, 12 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</guid>
    <description><![CDATA[简介优先队列算法，也成为堆队列算法。堆是一个二叉树，它的每个父节点都小于等于孩子节点。heapq实现了一个适合与Python的列表一起使用的]]></description>
</item><item>
    <title>数据结构与算法 - 前缀和</title>
    <link>https://penn513.github.io/%E5%89%8D%E7%BC%80%E5%92%8C/</link>
    <pubDate>Mon, 12 Jul 2021 15:58:26 &#43;0800</pubDate>
    <author>GP</author>
    <guid>https://penn513.github.io/%E5%89%8D%E7%BC%80%E5%92%8C/</guid>
    <description><![CDATA[简介前缀和主要适用的场景是原始数组不会被修改的情况下，频繁查询某个区间的累加和。 例题 1 - 和为K的子数组https://leetcode-cn]]></description>
</item></channel>
</rss>
